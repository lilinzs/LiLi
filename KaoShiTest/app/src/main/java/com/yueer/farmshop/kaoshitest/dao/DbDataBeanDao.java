package com.yueer.farmshop.kaoshitest.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yueer.farmshop.kaoshitest.db.DbDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_DATA_BEAN".
*/
public class DbDataBeanDao extends AbstractDao<DbDataBean, Long> {

    public static final String TABLENAME = "DB_DATA_BEAN";

    /**
     * Properties of entity DbDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NewId = new Property(0, Long.class, "newId", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Frist_name = new Property(2, String.class, "frist_name", false, "FRIST_NAME");
        public final static Property Shop_name = new Property(3, String.class, "shop_name", false, "SHOP_NAME");
        public final static Property Shop_introd = new Property(4, String.class, "shop_introd", false, "SHOP_INTROD");
        public final static Property Shop_pirce = new Property(5, String.class, "shop_pirce", false, "SHOP_PIRCE");
        public final static Property Shop_image_url = new Property(6, String.class, "shop_image_url", false, "SHOP_IMAGE_URL");
    }


    public DbDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DbDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: newId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"FRIST_NAME\" TEXT," + // 2: frist_name
                "\"SHOP_NAME\" TEXT," + // 3: shop_name
                "\"SHOP_INTROD\" TEXT," + // 4: shop_introd
                "\"SHOP_PIRCE\" TEXT," + // 5: shop_pirce
                "\"SHOP_IMAGE_URL\" TEXT);"); // 6: shop_image_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbDataBean entity) {
        stmt.clearBindings();
 
        Long newId = entity.getNewId();
        if (newId != null) {
            stmt.bindLong(1, newId);
        }
        stmt.bindLong(2, entity.getId());
 
        String frist_name = entity.getFrist_name();
        if (frist_name != null) {
            stmt.bindString(3, frist_name);
        }
 
        String shop_name = entity.getShop_name();
        if (shop_name != null) {
            stmt.bindString(4, shop_name);
        }
 
        String shop_introd = entity.getShop_introd();
        if (shop_introd != null) {
            stmt.bindString(5, shop_introd);
        }
 
        String shop_pirce = entity.getShop_pirce();
        if (shop_pirce != null) {
            stmt.bindString(6, shop_pirce);
        }
 
        String shop_image_url = entity.getShop_image_url();
        if (shop_image_url != null) {
            stmt.bindString(7, shop_image_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbDataBean entity) {
        stmt.clearBindings();
 
        Long newId = entity.getNewId();
        if (newId != null) {
            stmt.bindLong(1, newId);
        }
        stmt.bindLong(2, entity.getId());
 
        String frist_name = entity.getFrist_name();
        if (frist_name != null) {
            stmt.bindString(3, frist_name);
        }
 
        String shop_name = entity.getShop_name();
        if (shop_name != null) {
            stmt.bindString(4, shop_name);
        }
 
        String shop_introd = entity.getShop_introd();
        if (shop_introd != null) {
            stmt.bindString(5, shop_introd);
        }
 
        String shop_pirce = entity.getShop_pirce();
        if (shop_pirce != null) {
            stmt.bindString(6, shop_pirce);
        }
 
        String shop_image_url = entity.getShop_image_url();
        if (shop_image_url != null) {
            stmt.bindString(7, shop_image_url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbDataBean readEntity(Cursor cursor, int offset) {
        DbDataBean entity = new DbDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // newId
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // frist_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shop_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shop_introd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shop_pirce
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // shop_image_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbDataBean entity, int offset) {
        entity.setNewId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setFrist_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShop_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShop_introd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShop_pirce(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShop_image_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbDataBean entity, long rowId) {
        entity.setNewId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbDataBean entity) {
        if(entity != null) {
            return entity.getNewId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbDataBean entity) {
        return entity.getNewId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
